---
import clsx from 'clsx';

export type Props = {
    class?: string,
    skills: { name: string, weight: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 }[],
};

const weightToclassMap: Record<string, string> = {
    1: '-translate-z-100 opacity-10 px-32',
    2: '-translate-z-90 opacity-20 px-16',
    3: '-translate-z-80 opacity-30 px-16',
    4: '-translate-z-70 opacity-40 px-8',
    5: '-translate-z-60 opacity-50 px-8',
    6: '-translate-z-50 opacity-60 px-8',
    7: '-translate-z-40 opacity-70 px-4',
    8: '-translate-z-30 opacity-80 px-4',
    9: '-translate-z-20 opacity-90 px-2',
    10: '-translate-z-10 opacity-100 py-1',
};

const sortByWeight = (a: { weight: number }, b: { weight: number }): number => b.weight - a.weight;

const { class: className, skills } = Astro.props;

const sortedSkills = skills
    .map((el, idx) => ({...el, idx}))
    .sort(sortByWeight);
---
<script>
    class SkillCloud extends HTMLElement {

        private frameRequest: number | undefined;

        constructor() {
            super();

            this.updatePerspective = this.updatePerspective.bind(this);
            this.handleScroll = this.handleScroll.bind(this);
        }

        connectedCallback() {
            window.addEventListener("scroll", this.handleScroll);
        }

        disconnectedCallback() {
            window.removeEventListener("scroll", this.handleScroll);
            if (this.frameRequest !== undefined) {
                cancelAnimationFrame(this.frameRequest);
            }
        }

        private handleScroll() {
            if (this.frameRequest !== undefined) {
                cancelAnimationFrame(this.frameRequest);
            }

            this.frameRequest = requestAnimationFrame(this.updatePerspective);
        }

        private updatePerspective() {
            const { top } = this.getBoundingClientRect();
            this.style.perspectiveOrigin = `center ${-(top - window.innerHeight / 2)}px`;
        }
    }

    customElements.define('skill-cloud', SkillCloud);
</script>

<skill-cloud className={clsx(className, 'flex flex-wrap items-center justify-center perspective')}>
    {sortedSkills.map(({ idx, name, weight}) => (
        <li style={{order: idx}} class={clsx('whitespace-nowrap py-4', weightToclassMap[weight])}>
            {name}
        </li>
    ))}
</skill-cloud>
